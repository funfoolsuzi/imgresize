// Code generated by MockGen. DO NOT EDIT.
// Source: repo/image_repo.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockImageRepo is a mock of ImageRepo interface
type MockImageRepo struct {
	ctrl     *gomock.Controller
	recorder *MockImageRepoMockRecorder
}

// MockImageRepoMockRecorder is the mock recorder for MockImageRepo
type MockImageRepoMockRecorder struct {
	mock *MockImageRepo
}

// NewMockImageRepo creates a new mock instance
func NewMockImageRepo(ctrl *gomock.Controller) *MockImageRepo {
	mock := &MockImageRepo{ctrl: ctrl}
	mock.recorder = &MockImageRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockImageRepo) EXPECT() *MockImageRepoMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockImageRepo) Create(imageBytes []byte, p string) error {
	ret := m.ctrl.Call(m, "Create", imageBytes, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockImageRepoMockRecorder) Create(imageBytes, p interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockImageRepo)(nil).Create), imageBytes, p)
}

// Get mocks base method
func (m *MockImageRepo) Get(path string) ([]byte, error) {
	ret := m.ctrl.Call(m, "Get", path)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockImageRepoMockRecorder) Get(path interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockImageRepo)(nil).Get), path)
}

// Exist mocks base method
func (m *MockImageRepo) Exist(p string) bool {
	ret := m.ctrl.Call(m, "Exist", p)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exist indicates an expected call of Exist
func (mr *MockImageRepoMockRecorder) Exist(p interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exist", reflect.TypeOf((*MockImageRepo)(nil).Exist), p)
}
